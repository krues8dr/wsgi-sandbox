;; These first four configuration blocks are to give us a simple supervisord &
;; supervisorctl interation in the current working directory. In a production
;; setting, rewrite these four blocks according to the deployment.
;;
;; http://supervisord.org/

[supervisord]
nodaemon=true
logfile_maxbytes=50MB
logfile_backups=100

[supervisorctl]
serverurl=unix://supervisor.sock

[unix_http_server]
file=supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

;; Here are gunicorn processes for each of the WSGI applications of interest.
;;
;; Regarding the number of backup counts, if you are interested in unlimited backups, see:
;; https://github.com/Supervisor/supervisor/issues/142
;;
;; Each of the WSGI applications are configured to log to stderr. Here gunicorn
;; passes stdout and stderr to supervisord, which then handles the log files.

[program:flask_instance]
command=gunicorn -b 127.0.0.1:8010 --workers=4 --access-logfile=- --error-logfile=- flask_instance:application
autostart=true
autorestart=true
startretries=3
startsecs=1
stopwaitsecs=1
redirect_stderr=true
stdout_logfile=flask_instance.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=100
stderr_logfile=NONE

[program:django_instance]
command=gunicorn -b 127.0.0.1:8011 --workers=4 --access-logfile=- --error-logfile=- django_instance.wsgi:application
autostart=true
autorestart=true
startretries=3
startsecs=1
stopwaitsecs=1
redirect_stderr=true
stdout_logfile=django_instance.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=100
stderr_logfile=NONE

[program:wsgi_instance]
command=gunicorn -b 127.0.0.1:8012 --workers=4 --access-logfile=- --error-logfile=- wsgi_instance:application
autostart=true
autorestart=true
startretries=3
startsecs=1
stopwaitsecs=1
redirect_stderr=true
stdout_logfile=wsgi_instance.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=100
stderr_logfile=NONE
